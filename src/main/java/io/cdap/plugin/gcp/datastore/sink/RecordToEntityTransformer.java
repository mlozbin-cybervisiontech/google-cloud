/*
 * Copyright Â© 2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.cdap.plugin.gcp.datastore.sink;

import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Blob;
import com.google.cloud.datastore.BlobValue;
import com.google.cloud.datastore.BooleanValue;
import com.google.cloud.datastore.DoubleValue;
import com.google.cloud.datastore.EntityValue;
import com.google.cloud.datastore.FullEntity;
import com.google.cloud.datastore.IncompleteKey;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.ListValue;
import com.google.cloud.datastore.LongValue;
import com.google.cloud.datastore.NullValue;
import com.google.cloud.datastore.PathElement;
import com.google.cloud.datastore.StringValue;
import com.google.cloud.datastore.TimestampValue;
import com.google.cloud.datastore.Value;
import io.cdap.cdap.api.data.format.StructuredRecord;
import io.cdap.cdap.api.data.format.UnexpectedFormatException;
import io.cdap.cdap.api.data.schema.Schema;
import io.cdap.plugin.gcp.datastore.sink.util.IndexStrategy;
import io.cdap.plugin.gcp.datastore.sink.util.SinkKeyType;
import io.cdap.plugin.gcp.datastore.util.DatastorePropertyUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Array;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Transforms {@link StructuredRecord} to the Google Cloud Datastore {@link FullEntity}.
 */
public class RecordToEntityTransformer {

  private static final Logger LOG = LoggerFactory.getLogger(RecordToEntityTransformer.class);

  private final String project;
  private final String namespace;
  private final String kind;
  private final SinkKeyType keyType;
  private final String keyAlias;
  private final List<PathElement> ancestors;
  private final Set<String> indexedProperties;
  private final Predicate<String> excludedFromIndex;

  public RecordToEntityTransformer(String project,
                                   String namespace,
                                   String kind,
                                   SinkKeyType keyType,
                                   String keyAlias,
                                   List<PathElement> ancestors,
                                   IndexStrategy indexStrategy,
                                   Set<String> indexedProperties) {
    this.project = project;
    this.namespace = namespace;
    this.kind = kind;
    this.keyType = keyType;
    this.keyAlias = keyAlias;
    this.ancestors = ancestors;
    this.indexedProperties = indexedProperties;
    this.excludedFromIndex = isExcludedFromIndex(indexStrategy);
  }

  public FullEntity<?> transformStructuredRecord(StructuredRecord record) {
    KeyFactory keyFactory = new KeyFactory(project)
      .setNamespace(namespace)
      .setKind(kind);

    FullEntity.Builder<IncompleteKey> entityBuilder = FullEntity.newBuilder();
    List<Schema.Field> fields = Objects.requireNonNull(record.getSchema().getFields(), "Schema fields cannot be empty");

    boolean useAutoGeneratedKey = SinkKeyType.AUTO_GENERATED_KEY == keyType;
    for (Schema.Field field : fields) {
      String fieldName = field.getName();
      if (!useAutoGeneratedKey && keyAlias.equals(fieldName)) {
        entityBuilder.setKey(convertToKey(record, keyFactory, field));
      } else {
        entityBuilder.set(fieldName, convertToValue(fieldName, field.getSchema(), record,
                                                    excludedFromIndex.test(fieldName)));
      }
    }

    if (useAutoGeneratedKey) {
      entityBuilder.setKey(getAutoGeneratedKey(keyFactory));
    }
    return entityBuilder.build();
  }

  private Predicate<String> isExcludedFromIndex(IndexStrategy indexStrategy) {
    switch (indexStrategy) {
      case ALL:
        return fieldName -> false;
      case NONE:
        return fieldName -> true;
      case CUSTOM:
        return fieldName -> !indexedProperties.contains(fieldName);
      default:
        throw new IllegalStateException(String.format("Unsupported index strategy '%s'", indexStrategy));
    }
  }

  private IncompleteKey getAutoGeneratedKey(KeyFactory keyFactory) {
    if (!ancestors.isEmpty()) {
      keyFactory.addAncestors(ancestors);
    }
    return keyFactory.newKey();
  }

  @SuppressWarnings("ConstantConditions")
  private IncompleteKey convertToKey(StructuredRecord record, KeyFactory keyFactory, Schema.Field field) {
    Schema.Type schemaType = field.getSchema().getType();
    switch (schemaType) {
      case STRING: {
        String strValue = record.get(field.getName());
        if (strValue.isEmpty()) {
          throw new IllegalStateException(
            String.format("Key value cannot be empty. Key field: '%s', Key type: '%s'", field.getName(),
                          keyType.getValue()));
        }
        switch (keyType) {
          case CUSTOM_NAME: {
            if (!ancestors.isEmpty()) {
              keyFactory.addAncestors(ancestors);
            }
            return keyFactory.newKey(strValue);
          }
          case KEY_LITERAL: {
            return transformKeyLiteralToKey(field, keyFactory, strValue);
          }
          case URL_SAFE_KEY:
            return transformToUrlSafeKey(field, keyType, strValue);
          default:
            throw new IllegalStateException(
              String.format("Field '%s' of type '%s' cannot be used as a Cloud Datastore key type '%s'",
                            field.getName(), schemaType, keyType.getValue()));
        }
      }
      case INT:
      case LONG: {
        switch (keyType) {
          case CUSTOM_NAME: {
            if (!ancestors.isEmpty()) {
              keyFactory.addAncestors(ancestors);
            }
            Number numValue = record.get(field.getName());
            return keyFactory.newKey(numValue.longValue());
          }
          default:
            throw new IllegalStateException(
              String.format("Key field '%s' of type '%s' is not supported for record type: '%s'",
                            field.getName(), keyType.getValue(), schemaType));
        }
      }
      default:
        String foundType = field.getSchema().isNullable()
          ? "nullable " + field.getSchema().getNonNullable().getType().name()
          : schemaType.name();
        throw new IllegalStateException(
          String.format("Key field '%s' of type '%s' is not supported by key type: '%s'",
                        field.getName(), foundType, keyType.getValue()));
    }
  }

  /**
   * Transforms Url-safe key string to Google Cloud Datastore Key.
   * Url-safe key will represented in the encoded form that can be used as part of a URL.
   * For example: partition_id+%7B%0A++project_id%3A+%22test-project%22%0A++namespace_id%3A+% ...
   * <p/>
   * Note: Defined Project, Namespace, Kind must match extracted Project, Namespace, Kind accordingly.
   *
   * @param field      schema field with key value
   * @param keyType    type of key assigned to entities
   * @param urlSafeKey Url-safe key string
   * @return complete Google Cloud Datastore Key
   */
  private Key transformToUrlSafeKey(Schema.Field field, SinkKeyType keyType, String urlSafeKey) {
    Key key = Key.fromUrlSafe(urlSafeKey);
    if (!Objects.equals(project, key.getProjectId())) {
      throw new IllegalArgumentException(
        String.format("%s projectId must be equal to defined projectId. Key field: '%s', " +
                        "Expected: '%s', Received: '%s'",
                      keyType.getValue(), field.getName(), project, key.getProjectId()));
    } else if (!Objects.equals(namespace, key.getNamespace())) {
      throw new IllegalArgumentException(
        String.format("%s namespace must be equal to defined namespace. Key field: '%s', " +
                        "Expected: '%s', Received: '%s'",
                      keyType.getValue(), field.getName(), namespace, key.getNamespace()));
    } else if (!Objects.equals(kind, key.getKind())) {
      throw new IllegalArgumentException(
        String.format("%s kind must be equal to defined kind. Key field: '%s', " +
                        "Expected: '%s', Received: '%s'",
                      keyType.getValue(), field.getName(), kind, key.getKind()));
    }
    return key;
  }

  /**
   * Transforms Key Literal string to Google Cloud Datastore Key.
   * Key Literal string format: <i>key(kind_1, identifier_1, kind_2, identifier_2, [...])</i>.
   * <p/>
   * Example of key literal string: <i>"key(kind_1, 'stringId', kind_2, 100)"</i>
   * <p/>
   * Extracted kind: <i>kind_2</i>
   * <br/>
   * Extracted identifier: <i>100</i>
   * <br/>
   * Extracted Ancestor: <i>key(kind_1, 'stringId')</i>
   * <p/>
   * Note: Kind set to KeyFactory must match extracted Kind.
   *
   * @param field      schema field with key value
   * @param keyFactory Key creation factory
   * @param keyLiteral Key Literal string
   * @return complete Google Cloud Datastore Key
   */
  private Key transformKeyLiteralToKey(Schema.Field field, KeyFactory keyFactory, String keyLiteral) {
    List<PathElement> pathElements = DatastorePropertyUtil.parseKeyLiteral(keyLiteral);
    LOG.trace("Key Literal '{}' path elements: {}", keyLiteral, pathElements);
    if (pathElements.isEmpty()) {
      throw new IllegalArgumentException(String.format("Field '%s' value has unexpected Key Literal format: '%s'",
                                                       field.getName(), keyLiteral));
    }

    PathElement keyElement = pathElements.get(pathElements.size() - 1);
    LOG.trace("Detected keyElement: '{}'", keyElement);
    if (!kind.equals(keyElement.getKind())) {
      throw new IllegalArgumentException(
        String.format("Received Key Literal kind '%s' must match defined kind '%s'. Field '%s', key literal: '%s'",
                      keyElement.getKind(), keyFactory, field.getName(), keyLiteral));
    }

    List<PathElement> ancestors = pathElements.subList(0, pathElements.size() - 1);
    if (!ancestors.isEmpty()) {
      LOG.trace("Detected ancestors: {}", ancestors);
      keyFactory.addAncestors(ancestors);
    }

    if (keyElement.hasId()) {
      return keyFactory.newKey(keyElement.getId());
    }
    return keyFactory.newKey(keyElement.getName());
  }

  @SuppressWarnings("ConstantConditions")
  private Value<?> convertToValue(String fieldName, Schema fieldSchema, StructuredRecord record,
                                  boolean excludeFromIndex) {
    if (record.get(fieldName) == null) {
      return NullValue.newBuilder()
        .setExcludeFromIndexes(excludeFromIndex)
        .build();
    }

    Schema.LogicalType logicalType = fieldSchema.getLogicalType();
    if (logicalType != null) {
      switch (logicalType) {
        case TIMESTAMP_MILLIS:
        case TIMESTAMP_MICROS:
          ZonedDateTime ts = getValue(record::getTimestamp, fieldName, logicalType.getToken(), ZonedDateTime.class);
          Timestamp gcpTimestamp = Timestamp.ofTimeSecondsAndNanos(ts.toEpochSecond(), ts.getNano());
          return TimestampValue.newBuilder(gcpTimestamp)
            .setExcludeFromIndexes(excludeFromIndex)
            .build();
        default:
          throw new IllegalStateException(
            String.format("Record type '%s' is not supported for field '%s'", logicalType.getToken(), fieldName));
      }
    }

    Schema.Type fieldType = fieldSchema.getType();
    switch (fieldType) {
      case STRING:
        String stringValue = getValue(record::get, fieldName, fieldType.toString(), String.class);
        return StringValue.newBuilder(stringValue)
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case INT:
      case LONG:
        Number longValue = getValue(record::get, fieldName, fieldType.toString(), Number.class);
        return LongValue.newBuilder(longValue.longValue())
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case FLOAT:
      case DOUBLE:
        Number doubleValue = getValue(record::get, fieldName, fieldType.toString(), Number.class);
        return DoubleValue.newBuilder(doubleValue.doubleValue())
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case BOOLEAN:
        Boolean booleanValue = getValue(record::get, fieldName, fieldType.toString(), Boolean.class);
        return BooleanValue.newBuilder(booleanValue)
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case BYTES:
        byte[] byteArray = getValue(record::get, fieldName, fieldType.toString(), byte[].class);
        return BlobValue.newBuilder(Blob.copyFrom(byteArray))
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case RECORD:
        StructuredRecord nestedRecord = getValue(record::get, fieldName, fieldType.toString(), StructuredRecord.class);
        FullEntity.Builder<IncompleteKey> nestedBuilder = FullEntity.newBuilder();
        Objects.requireNonNull(fieldSchema.getFields(), "Nested Schema fields cannot be empty").forEach(
          nestedField -> nestedBuilder.set(nestedField.getName(),
                                           convertToValue(nestedField.getName(), nestedField.getSchema(),
                                                          nestedRecord, excludeFromIndex)));
        return EntityValue.newBuilder(nestedBuilder.build())
          .setExcludeFromIndexes(excludeFromIndex)
          .build();
      case ARRAY:
        Schema elementSchema = Schema.recordOf("arrayElementSchema",
                                               Schema.Field.of(fieldName, fieldSchema.getComponentSchema()));

        Collection<Object> arrayValues = toCollection(fieldName, fieldType, record.get(fieldName));
        List<Value<?>> values = arrayValues.stream()
          .map(value -> {
            // Wrap array element into record to be able to re-use convertToValue method type conversion logic
            // because StructuredRecord has different methods to extract value based on schema type.
            // For example: record.get(fieldName) is used for most of the values,
            // record.getTimestamp(fieldName) is used for timestamp values.
            StructuredRecord structuredRecord = StructuredRecord.builder(elementSchema)
              .set(fieldName, value)
              .build();
            return convertToValue(fieldName, elementSchema.getField(fieldName).getSchema(),
                                  structuredRecord, false);
          })
          .collect(Collectors.toList());

        // According to Datastore rule: list cannot be excluded from indexes
        return ListValue.of(values);
      case UNION:
        // simple UNION type
        if (fieldSchema.isNullable()) {
          return convertToValue(fieldName, fieldSchema.getNonNullable(), record, excludeFromIndex);
        }
        // complex UNION type
        for (Schema unionSchema : fieldSchema.getUnionSchemas()) {
          try {
            return convertToValue(fieldName, unionSchema, record, excludeFromIndex);
          } catch (UnexpectedFormatException | IllegalStateException e) {
            // if we couldn't convert, move to the next possibility
          }
        }
        throw new IllegalStateException(
          String.format("Field '%s' is of unexpected type '%s'. Declared 'complex UNION' types: %s",
                        fieldName, record.get(fieldName).getClass().getSimpleName(), fieldSchema.getUnionSchemas()));
      default:
        throw new IllegalStateException(
          String.format("Record type '%s' is not supported for field '%s'", fieldType.name(), fieldName));
    }
  }

  private <T> T getValue(Function<String, T> valueExtractor, String fieldName, String fieldType, Class<T> clazz) {
    T value = valueExtractor.apply(fieldName);
    if (clazz.isAssignableFrom(value.getClass())) {
      return clazz.cast(value);
    }
    throw new UnexpectedFormatException(
      String.format("Field '%s' is not of expected type '%s'", fieldName, fieldType));
  }

  /**
   * Transforms given value to {@link Collection<Object>}, fails if given value is not a collection or array.
   *
   * @param fieldName field name
   * @param fieldType field type
   * @param value value to be casted to {@link Collection<Object>}
   * @return instance of {@link Collection<Object>}
   * @throws UnexpectedFormatException in case if given value is not a collection or array
   */
  @SuppressWarnings("unchecked")
  private Collection<Object> toCollection(String fieldName, Schema.Type fieldType, Object value) {
    Function<String, Collection> valueExtractor = name -> {
      throw new UnexpectedFormatException(
        String.format("Field '%s' of type '%s' has unexpected value '%s'", name, fieldType, value));
    };

    if (value instanceof Collection) {
      valueExtractor = name -> (Collection<?>) value;
    } else if (value.getClass().isArray()) {
      valueExtractor = name -> convertToObjectCollection(value);
    }
    return getValue(valueExtractor, fieldName, fieldType.toString(), Collection.class);
  }

  private Collection<Object> convertToObjectCollection(Object array) {
    Class ofArray = array.getClass().getComponentType();
    if (ofArray.isPrimitive()) {
      List<Object> list = new ArrayList<>();
      int length = Array.getLength(array);
      for (int i = 0; i < length; i++) {
        list.add(Array.get(array, i));
      }
      return list;
    } else {
      return Arrays.asList((Object[]) array);
    }
  }
}
